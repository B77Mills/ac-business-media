import hierarchyAliases from "@base-cms/marko-web/utils/hierarchy-aliases";
import { getAsObject, get } from "@base-cms/object-path";
import queryFragment from "../../graphql/fragments/content-list";

$ const { site } = out.global;
$ const { id, type, pageNode } = data;

$ const displayPrimaryImage = ["whitepaper", "media-gallery"].includes(type) ? false : true;
$ const displayPublishedDate = ["event", "webinar"].includes(type) ? false : true;

<marko-web-content-page-layout id=id type=type>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-content-context>
  </@head>
  <@page>
    <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
      $ const section = resolved.getAsObject("primarySection");
      $ const aliases = hierarchyAliases(section);
      <marko-web-page-wrapper class="mb-block">
        <@section modifiers=["no-bottom-spacer"]>
          <div class="row">
            <div class="col">
              <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
              <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />

              <div class="page-attribution-wrapper">
                <default-theme-page-dates|{ blockName }|>
                  <if(content.type === "event")>
                    <marko-web-content-start-date block-name=blockName obj=content />
                    <marko-web-content-end-date block-name=blockName obj=content />
                  </if>
                  <if(content.type === "webinar")>
                    <marko-web-content-start-date block-name=blockName obj=content />
                  </if>
                  <if(displayPublishedDate)>
                    <marko-web-content-published block-name=blockName obj=content />
                  </if>
                </default-theme-page-dates>
                <default-theme-content-attribution obj=content />
              </div>
            </div>
          </div>
        </@section>
        <@section>
          <div class="row">
            <default-theme-page-contents|{ blockName }| class="col">
              <if(content.embedCode)>
                <marko-web-content-embed-code block-name=blockName obj=content />
              </if>
              <else-if(displayPrimaryImage)>
                $ const isLogo = get(content, "primaryImage.isLogo");
                <if(isLogo)>
                  <marko-web-page-image
                    obj=content.primaryImage
                    modifiers=["primary-image-inline"]
                    fluid=false
                    width=250
                  />
                </if>
                <else>
                  <marko-web-page-image
                    obj=content.primaryImage
                    modifiers=["fluid-16by9"]
                    options={ w: 512, h: 288, fit: 'crop' }
                  />
                </else>
              </else-if>
              <default-theme-content-contact-details obj=content />
              <marko-web-content-body block-name=blockName obj=content />
              <marko-web-content-sidebars block-name=blockName obj=content />
              <if(type === "document")>
                <default-theme-content-download obj=content>
                  <@wufoo user-name=site.get("wufoo.userName") />
                  <@link class="btn btn-lg btn-primary" />
                </default-theme-content-download>
              </if>
              <if(type === "webinar")>
                <default-theme-content-link-url
                  obj=content
                  label="Register/View"
                  target="_blank"
                />
              </if>
            </default-theme-page-contents>
          </div>
        </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>

  <@below-page>
    <marko-web-resolve-page|{ resolved }| node=pageNode>
      $ const section = resolved.getAsObject("primarySection");
      <marko-web-query|{ nodes }|
        name="website-scheduled-content"
        params={ sectionId: section.id, limit: 12, queryFragment }
      >
        <website-content-card-deck-flow nodes=nodes />
      </marko-web-query>

      <marko-web-load-more
        max-pages=0
        component-name="content-card-deck-flow"
        fragment-name="content-list"
        query-name="website-scheduled-content"
        query-params={ sectionId: section.id, limit: 12, skip: 12 }
        page-input={ for: "content", id, type }
      />
    </marko-web-resolve-page>
  </@below-page>
</marko-web-content-page-layout>
