import { getAsObject, get } from "@parameter1/base-cms-object-path";
import queryFragment from "@parameter1/base-cms-marko-web-theme-monorail/graphql/fragments/content-list";
$ const { config } = out.global;

// FCP and GIP
$ const siteIds = ["53ca8d671784f8066eb2c949", "53c95fdd1784f8066eb2c891"];
$ const useSectionAlias = siteIds.includes(get(config, 'websiteContext.id')) && input.sectionAlias;
$ const sectionAlias =  useSectionAlias ? input.sectionAlias : "home"
$ const limit = 4;
$ const params = {
  sectionAlias,
  optionName: "Recommended",
  limit,
  skip: input.skip,
  requiresImage: true,
  ...(input.contentId && { excludeContentIds: [input.contentId] }),
  queryFragment,
};

<marko-web-query|{ nodes }| name="website-scheduled-content" params=params collapsible=false>
  <if(nodes.length === limit)>
    <theme-content-card-deck-block cols=limit title="Recommended" nodes=nodes>
      <@native-x ...getAsObject(input, "nativeX") />
    </theme-content-card-deck-block>
  </if>
  <else>
  $ const excludeContentIds = nodes.map((node) => node.id);
  $ if (input.contentId) excludeContentIds.push(input.contentId);
  $ const homeParams = {
    ...params,
    sectionAlias: "home",
    limit: limit - nodes.length,
    excludeContentIds
  };
  <marko-web-query|{ nodes: homeSectionNodes }| name="website-scheduled-content" params=homeParams>
    $ nodes.push(...homeSectionNodes)
    <theme-content-card-deck-block cols=limit title="Recommended" nodes=nodes>
      <@native-x ...getAsObject(input, "nativeX") />
    </theme-content-card-deck-block>
  </marko-web-query>
  </else>
</marko-web-query>
