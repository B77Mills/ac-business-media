import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import queryFragment from "@parameter1/base-cms-marko-web-theme-monorail/graphql/fragments/section-feed-block";

$ const { pagination: p, req, GAM } = out.global;
$ const featureBlock = defaultValue(input.featuredBlock, { limit: 12 });
$ const featuredLimit = defaultValue(featureBlock.limit, 0);
$ const pageOneOffset = defaultValue(featureBlock.limit, 0);
$ const withPagination = defaultValue(input.withPagination, true);
$ const perPage = 12;
$ const skip = p.page === 1 ? 0 : p.skip({ perPage }) + featuredLimit;

$ const { noRail, modifiers } = input;
$ const path = input.path || input.alias || req.path;
$ const withAds = GAM ? defaultValue(input.withAds, true) : false;
$ const aboveTheFold = defaultValue(input.aboveTheFold, false);

$ const queryName = input.queryName ? input.queryName : "website-scheduled-content";
$ const queryParams = {
  queryFragment,
  ...input.queryParams,
  ...(new Set(["website-scheduled-content", "website-optioned-content"]).has(queryName) && {
    sectionAlias: input.alias,
  }),
};
<!-- only apply featured noded chuncking and display on page #1 -->
$ const chunkLengths = p.page === 1 ? [featuredLimit, 3, 3, 3, 3] : [0, 3, 3, 3, 3];
$ const limit = chunkLengths.reduce((n, length) => (n + length), 0);
$ const params = { ...queryParams, limit, skip };

<marko-web-query|{ aliases, nodes }| name=queryName params=params>
  $ const groups = chunkLengths.reduce((chunked, length, index) => {
    const start = length * index;
    const end = start + length;
    chunked.push(nodes.slice(start, end));
    return chunked;
  }, []);

  $ const featuredNodes = groups[0];

  <if(featuredNodes.length)>
    <div class="row">
      <div class="col-lg-12">
      <div class="row top-stories-row">
        $ const rowOneClass = "col-lg-5";
        <div class=rowOneClass>
          <if(featuredNodes && featuredNodes.length)>
            $ const topStoryNode = featuredNodes[0];
            $ const heroImageNode = {
              id: topStoryNode.id,
              type: topStoryNode.type,
              siteContext: topStoryNode.siteContext,
              primaryImage: topStoryNode.primaryImage,
            };
            $ const featuredCardNodes = topStoryNode;
            $ const cardNodes = topStoryNode;
            <marko-web-element block-name="top-story" name="row">
              <marko-web-element block-name="top-story" name="col" modifiers=["hero"]>
                <theme-content-node
                  image-position="top"
                  card=true
                  flush=true
                  image-only=true
                  modifiers=["top-story-hero-image"]
                  node=heroImageNode
                >
                  <@image fluid=true width=685 ar="3:2" lazyload=false />
                </theme-content-node>
              </marko-web-element>
              <marko-web-element block-name="top-story" name="col" modifiers=["list"]>
                <theme-content-node
                  full-height=true
                  card=true
                  display-image=false
                  flush=true
                  with-dates=false
                  modifiers=["top-story-hero"]
                  node=topStoryNode
                />
              </marko-web-element>
            </marko-web-element>
          </if>
        </div>
        <div class="col-lg-4">
          <theme-latest-content-list-block nodes=featuredNodes.slice(1,9) title="" >
            <@node with-section=false with-dates=false display-image=false />
          </theme-latest-content-list-block>
        </div>
        <div class="col-lg-3">
          <div class="mb-3">
            <theme-content-card-deck-block
              title=""
              alias="home"
              cols=1
              nodes=featuredNodes.slice(10,12)
              view-more=false
            >
              <@node with-section=false />
            </theme-content-card-deck-block>
          </div>
        </div>
      </div>
        $ console.log('hitting: ', featuredNodes)
        <theme-gam-define-display-ad
          name="leaderboard"
          position="section-page"
          aliases=aliases
          modifiers=[]
        />
      </div>
    </div>
  </if>

  $ const nodeGroups = groups.slice(1);

  <if(input.rails && input.rails.length === 1)>
    <div class="row">
      <div class="col-lg-8">
        <for|nodeGroup, index| of=nodeGroups>
          $ const isLast = index === nodeGroups.length - 1;
          $ const header = index === 0 ? input.header : null;
          $ const adName = index === 0 ? input.adName || "top-rotation" : input.adName || "rotation";
          $ const flowInput = (index === 0 && aboveTheFold) ? { ...input.flow, lazyload: false } : input.flow;
          $ const nativeX = index === 0 ? input.nativeX : undefined;
          <section-feed-flow
            nodes=nodeGroup
            header=header
            modifiers=modifiers
            node=input.node
            node-list=input.nodeList
            aliases=input.aliases
            flow=flowInput
            with-ads=withAds
            ad-name=adName
            native-x=nativeX
          />
        </for>
        <if(withPagination)>
          <theme-section-feed-block|{ totalCount }| alias=input.alias query-name=queryName count-only=true>
            <@query-params ...queryParams />
            <theme-pagination-controls
              per-page=limit
              total-count=totalCount
              path=path
            />
          </theme-section-feed-block>
        </if>
      </div>
      <div class="col-lg-4">
        <${input.rails[0].renderBody} />
      </div>
    </div>
  </if>
  <else-if(noRail)>
    <div class="row">
      <div class="col-lg-12">
        <for|nodeGroup, index| of=nodeGroups>
          $ const isLast = index === nodeGroups.length - 1;
          $ const header = index === 0 ? input.header : null;
          $ const adName = index === 0 ? input.adName || "top-rotation" : input.adName || "rotation";
          $ const flowInput = (index === 0 && aboveTheFold) ? { ...input.flow, lazyload: false } : input.flow;
          $ const nativeX = index === 0 ? input.nativeX : undefined;
          <section-feed-flow
            nodes=nodeGroup
            header=header
            modifiers=modifiers
            node=input.node
            node-list=input.nodeList
            aliases=input.aliases
            flow=flowInput
            with-ads=withAds
            ad-name=adName
            native-x=nativeX
          />
        </for>
        <if(withPagination)>
          <theme-section-feed-block|{ totalCount }| alias=input.alias query-name=queryName count-only=true>
            <@query-params ...queryParams />
            <theme-pagination-controls
              per-page=limit
              total-count=totalCount
              path=path
            />
          </theme-section-feed-block>
        </if>
      </div>
    </div>
  </else-if>
  <else>
    $ const topNodeGroups = nodeGroups.slice(0, 2);
    $ const bottomNodeGroups = nodeGroups.slice(2);
    <div class="row">
      <div class="col-lg-8">
        <for|nodeGroup, index| of=topNodeGroups>
          $ const header = index === 0 ? input.header : null;
          $ const adName = index === 0 ? input.adName || "rotation" : null;
          $ const flowInput = (index === 0 && aboveTheFold) ? { ...input.flow, lazyload: false } : input.flow;
          $ const nativeX = index === 0 ? input.nativeX : undefined;
          <section-feed-flow
            nodes=nodeGroup
            header=header
            modifiers=modifiers
            node=input.node
            node-list=input.nodeList
            aliases=input.aliases
            with-ads=withAds
            ad-name=adName
            flow=flowInput
            native-x=nativeX
          />
        </for>
      </div>
      <div class="col-lg-4">
        <if(input.rails && input.rails[0])>
          <${input.rails[0].renderBody} />
        </if>
        <else>
          <marko-web-identity-x-context|{ hasUser }|>
            <if(!hasUser)>
              <div class="mb-block">
                <global-follow-us-block />
                <!-- <global-identity-x-newsletter-form-inline with-image=false type="inlineContent" /> -->
              </div>
            </if>
            <else>
              <div class="mb-block sticky-top">
                <theme-gam-define-display-ad
                  name="top-rotation"
                  position="content_page"
                  aliases=aliases
                  modifiers=["max-width-300", "center", "margin-auto-x", "rail"]
                  class="mb-0"
                />
              </div>
            </else>
          </marko-web-identity-x-context>
        </else>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-8">
        <for|nodeGroup, index| of=bottomNodeGroups>
          $ const isLast = index === bottomNodeGroups.length - 1;
          <section-feed-flow
            nodes=nodeGroup
            modifiers=modifiers
            node=input.node
            node-list=input.nodeList
            aliases=input.aliases
            with-ads=(!isLast && withAds)
            flow=input.flow
          />
        </for>
        <if(withPagination)>
          <theme-section-feed-block|{ totalCount }| alias=input.alias query-name=queryName count-only=true>
            <@query-params ...queryParams />
            <theme-pagination-controls
              per-page=limit
              total-count=totalCount
              path=path
            />
          </theme-section-feed-block>
        </if>
      </div>
      <div class="col-lg-4">
        <if(input.rails && input.rails[1])>
          <${input.rails[1].renderBody} />
        </if>
        <else>
          <theme-client-side-most-popular-list-block class="sticky-top" limit=5 />
        </else>
      </div>
    </div>
  </else>
</marko-web-query>
